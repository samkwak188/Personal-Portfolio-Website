{
  "src/lib/components/DeckGL.react.js": {
    "description": "This component lets you visualizes PyDeck and deck/json files\ndirectly in Dash. It also exposes various events (such as click,\nhover and drag) inside callbacks.",
    "displayName": "DeckGL",
    "methods": [
      {
        "name": "safeSetProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "events",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "data": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Your map using the Deck.gl JSON format. This can be generated by calling\n`pdk.Deck(...).to_json()`. Both a Python dictionary and a JSON-string your map is accepted.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Custom CSS for your map. This is useful for changing the height, width, and sometimes the background color.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "enableEvents": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "Either a boolean indicating if all event callbacks should be enabled, or a list of strings\nindicating which ones should be used. If it's a list, you will need to specify one of the\nfollowing gestures: `click`, `dragStart`, `dragEnd`, `hover`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "tooltip": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "This can be a boolean value (e.g. `True`, `False`) to display the default tooltip.\nYou can also give a dictionary specifying an `html` template and custom style using `css`. For more\ninformation about templating, see: https://pydeck.gl/tooltip.html",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mapboxKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "You will need a mapbox token to use deck.gl. Please create a mapbox\nand follow the instructions here: https://docs.mapbox.com/help/how-mapbox-works/access-tokens/",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clickEvent": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when an element in the map is clicked. This contains\nthe original gesture event (in JSON)."
      },
      "clickInfo": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when an element in the map is clicked. This contains\nthe picking info describing the object being clicked.\nComplete description here:\nhttps://deck.gl/docs/developer-guide/interactivity#the-picking-info-object"
      },
      "hoverEvent": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when an element in the map is hovered. This contains\nthe original gesture event (in JSON)."
      },
      "hoverInfo": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when an element in the map is hovered. This contains\nthe picking info describing the object being hovered.\nComplete description here:\nhttps://deck.gl/docs/developer-guide/interactivity#the-picking-info-object"
      },
      "dragStartEvent": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nTo use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type. \nThis prop is updated when the user starts dragging on the canvas. This contains\nthe original gesture event (in JSON)."
      },
      "dragStartInfo": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when the user starts dragging on the canvas. This contains\nthe picking info describing the object being dragged.\nComplete description here:\nhttps://deck.gl/docs/developer-guide/interactivity#the-picking-info-object"
      },
      "dragEndEvent": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when the user releases from dragging the canvas. This contains\nthe original gesture event (in JSON)."
      },
      "dragEndInfo": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Read-only prop. To use this, make sure that `enableEvents` is set to `True`, or that `enableEvents` is a list that contains this event type.\nThis prop is updated when the user releases from dragging the canvas. This contains\nthe picking info describing the object being dragged.\nComplete description here:\nhttps://deck.gl/docs/developer-guide/interactivity#the-picking-info-object"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  }
}